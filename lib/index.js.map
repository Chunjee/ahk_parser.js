{"version":3,"sources":["webpack://webpackNumbers/webpack/universalModuleDefinition","webpack://webpackNumbers/./src/tokens.ts","webpack://webpackNumbers/webpack/bootstrap","webpack://webpackNumbers/./src/index.ts"],"names":["root","factory","exports","module","define","amd","global","Object","defineProperty","value","endingMultiLineComment","startingMultiLineComment","CommentSemiColon","variableCharsObj","whiteSpaceObj","whiteSpace","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","tokens_1","console","debug","bind","default","content","lines","split","numberOfLines","length","everything","i","c","outer","numberOfChars","numCharsMinusOne","slice","outer2","outer3","startPosFuncName","funcName","isNaN","Number","push","type","line","colStart","colEnd","name"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAwB,eAAID,IAE5BD,EAAqB,eAAIC,IAR3B,CASGK,QAAQ,WACX,M,sCCTAC,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQQ,uBAAyBR,EAAQS,yBAA2BT,EAAQU,iBAAmBV,EAAQW,iBAAmBX,EAAQY,cAAgBZ,EAAQa,gBAAa,EACvKb,EAAQa,WAAa,2BACrBb,EAAQY,cAAgB,CAAE,KAAK,EAAM,MAAM,GAE3CZ,EAAQW,iBAAmuBX,EAAQU,iBAAmB,gCAC3BV,EAAQS,yBAA2B,mCACnCT,EAAQQ,uBAAyB,qCCV7BM,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAajB,QAGrB,IAAIC,EAASa,EAAyBE,GAAY,CAGjDhB,QAAS,IAOV,OAHAmB,EAAoBH,GAAUf,EAAQA,EAAOD,QAASe,GAG/Cd,EAAOD,Q,6BCpBfK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtD,MAAMa,EAAW,EAAQ,KACfC,QAAQC,MAAMC,KAAKF,SAC7BrB,EAAQwB,QAAWC,IACf,MAAMC,EAAQD,EAAQE,MAAM,MACtBC,EAAgBF,EAAMG,OACtBC,EAAa,GACnB,IAAIC,EAAI,EAAGC,EAAI,EACfC,EAAO,KAAOF,EAAIH,GAAe,CAC7BI,EAAI,EACJ,IAAIE,EAAgBR,EAAMK,GAAGF,OAE7B,MAAMM,EAAmBD,EAAgB,EAEzC,KAAOF,EAAIG,GAAkB,CAEzB,IAAIf,EAASR,cAAcc,EAAMK,GAAGC,IAApC,CAKK,GAAiC,OAA7BN,EAAMK,GAAGK,MAAMJ,EAAGA,EAAI,GAAa,CAExCD,IAEAM,EAAQ,KAAON,EAAIH,GAAe,CAC9BI,EAAI,EACJ,MAAMG,EAAmBT,EAAMK,GAAGF,OAAS,EAC3C,KAAOG,EAAIG,GAAkB,CACzB,IAAIf,EAASR,cAAcc,EAAMK,GAAGC,IAApC,CAIK,GAAiC,OAA7BN,EAAMK,GAAGK,MAAMJ,EAAGA,EAAI,GAAa,CAExCD,IACA,MAAMM,EAEV,MARIL,IAURD,KAGR,MAzBIC,IA2BRM,EAAQ,KAAON,EAAIE,GAAe,CAC9B,GAAoB,MAAhBR,EAAMK,GAAGC,GAAY,CAErBD,IACA,SAASE,EAER,GAAoB,MAAhBP,EAAMK,GAAGC,GAAY,CAE1BA,IACAK,EAAQ,OAAa,CACjB,KAAOL,EAAIE,GAAiBd,EAASR,cAAcc,EAAMK,GAAGC,KACxDA,IAEJ,KAAOA,EAAIE,GAAe,CACtB,GAAoB,MAAhBR,EAAMK,GAAGC,GAAY,CACrB,GAAIA,EAAI,EAAIE,EAAe,CACvB,GAAwB,MAApBR,EAAMK,GAAGC,EAAI,GAAY,CAEzBA,GAAK,EACL,SAIAA,IAEA,MAAMK,EAKVL,IAEA,MAAMK,EAGdL,IAEJ,KAAMA,GAAKE,EACP,SAASI,EAEbN,EAAI,EACJE,EAAgBR,EAAMK,GAAGF,aAG5B,GAAIT,EAAST,iBAAiBe,EAAMK,GAAGC,IAAK,CAG7C,MAAMO,EAAmBP,EAEzB,IADAA,IACOA,EAAIE,GAAe,CACtB,IAAId,EAAST,iBAAiBe,EAAMK,GAAGC,IAAvC,CAIK,GAAoB,MAAhBN,EAAMK,GAAGC,GAAY,CAC1B,MAAMQ,EAAWd,EAAMK,GAAGK,MAAMG,EAAkBP,GAE9CS,MAAMC,OAAOF,KAKbV,EAAWa,KAAK,CAAEC,KAAM,WAAYC,KAAMd,EAAGe,SAAUP,EAAkBQ,OAAQf,EAAGgB,KAAMtB,EAAMK,GAAGK,MAAMG,EAAkBP,KAE/HA,IACA,SAASM,EAIT,SAASA,EAlBTN,KAsBZA,IAEJD,IAEJ,OAAOD,I","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"webpackNumbers\"] = factory();\n\telse\n\t\troot[\"webpackNumbers\"] = factory();\n})(global, function() {\nreturn ","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.endingMultiLineComment = exports.startingMultiLineComment = exports.CommentSemiColon = exports.variableCharsObj = exports.whiteSpaceObj = exports.whiteSpace = void 0;\r\nexports.whiteSpace = /\\u000B\\u000C\\u0020\\u00A0/;\r\nexports.whiteSpaceObj = { ' ': true, '\\t': true };\r\n// \"([a-zA-Z0-9_#@$]+)\\(.*?\\)\"\r\nexports.variableCharsObj = { 'a': true, 'b': true, 'c': true, 'd': true, 'e': true, 'f': true, 'g': true, 'h': true, 'i': true, 'j': true, 'k': true, 'l': true, 'm': true, 'n': true, 'o': true, 'p': true, 'q': true, 'r': true, 's': true, 't': true, 'u': true, 'v': true, 'w': true, 'x': true, 'y': true, 'z': true, 'A': true, 'B': true, 'C': true, 'D': true, 'E': true, 'F': true, 'G': true, 'H': true, 'I': true, 'J': true, 'K': true, 'L': true, 'M': true, 'N': true, 'O': true, 'P': true, 'Q': true, 'R': true, 'S': true, 'T': true, 'U': true, 'V': true, 'W': true, 'X': true, 'Y': true, 'Z': true, '0': true, '1': true, '2': true, '3': true, '4': true, '5': true, '6': true, '7': true, '8': true, '9': true, '_': true, '#': true, '@': true, '$': true };\r\n// export const whiteSpaceObj: stringIndexBool = {' ':true,'\t':true}\r\n// export const whiteSpaceObj = {'\\u000B':true,'\\u000C':true,'\\u0020':true,'\\u00A0':true}\r\nexports.CommentSemiColon = /^[\\u000B\\u000C\\u0020\\u00A0]*;/;\r\nexports.startingMultiLineComment = /^[\\u000B\\u000C\\u0020\\u00A0]*\\/\\*/;\r\nexports.endingMultiLineComment = /^[\\u000B\\u000C\\u0020\\u00A0]*\\*\\//;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tokens_1 = require(\"./tokens\");\r\nconst d = console.debug.bind(console);\r\nexports.default = (content) => {\r\n    const lines = content.split('\\n');\r\n    const numberOfLines = lines.length;\r\n    const everything = [];\r\n    let i = 0, c = 0;\r\n    outer: while (i < numberOfLines) {\r\n        c = 0;\r\n        let numberOfChars = lines[i].length;\r\n        // break\r\n        const numCharsMinusOne = numberOfChars - 1;\r\n        // leave 2 chars at end\r\n        while (c < numCharsMinusOne) {\r\n            // if char is whitespace\r\n            if (tokens_1.whiteSpaceObj[lines[i][c]]) {\r\n                // d(char())\r\n                c++;\r\n                continue;\r\n            }\r\n            else if (lines[i].slice(c, c + 2) === '/*') {\r\n                // d('MultilineComment START', l())\r\n                i++;\r\n                // continue outer\r\n                outer2: while (i < numberOfLines) {\r\n                    c = 0;\r\n                    const numCharsMinusOne = lines[i].length - 1;\r\n                    while (c < numCharsMinusOne) {\r\n                        if (tokens_1.whiteSpaceObj[lines[i][c]]) {\r\n                            c++;\r\n                            continue;\r\n                        }\r\n                        else if (lines[i].slice(c, c + 2) === '*/') {\r\n                            // d('MultilineComment END', l())\r\n                            i++;\r\n                            break outer2;\r\n                        }\r\n                        break;\r\n                    }\r\n                    i++;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        outer3: while (c < numberOfChars) {\r\n            if (lines[i][c] === ';') {\r\n                // d('SemiColonComment', `${c}-END`, l())\r\n                i++;\r\n                continue outer;\r\n            }\r\n            else if (lines[i][c] === '\"') {\r\n                const strStartPos = c, strStartLine = i;\r\n                c++;\r\n                outer2: while (true) {\r\n                    while (c < numberOfChars && tokens_1.whiteSpaceObj[lines[i][c]]) {\r\n                        c++;\r\n                    }\r\n                    while (c < numberOfChars) {\r\n                        if (lines[i][c] === '\"') {\r\n                            if (c + 1 < numberOfChars) {\r\n                                if (lines[i][c + 1] === '\"') {\r\n                                    // 2 doubleQuotes you may continue\r\n                                    c += 2;\r\n                                    continue;\r\n                                }\r\n                                else {\r\n                                    // not a quote the string ends\r\n                                    c++;\r\n                                    // d('no quote after DoubleQuotesString', `Ln ${strStartLine + 1}, Col ${strStartPos + 1} - Ln ${i + 1}, Col ${c + 1}`)\r\n                                    break outer2;\r\n                                }\r\n                            }\r\n                            else {\r\n                                // EOL the string ends\r\n                                c++;\r\n                                // d('EOL DoubleQuotesString', `Ln ${strStartLine + 1}, Col ${strStartPos + 1} - Ln ${i + 1}, Col ${c + 1}`)\r\n                                break outer2;\r\n                            }\r\n                        }\r\n                        c++;\r\n                    }\r\n                    if (++c >= numberOfChars) {\r\n                        continue outer3;\r\n                    }\r\n                    c = 0;\r\n                    numberOfChars = lines[i].length;\r\n                }\r\n            }\r\n            else if (tokens_1.variableCharsObj[lines[i][c]]) {\r\n                // c++\r\n                // continue\r\n                const startPosFuncName = c;\r\n                c++;\r\n                while (c < numberOfChars) {\r\n                    if (tokens_1.variableCharsObj[lines[i][c]]) {\r\n                        c++;\r\n                        continue;\r\n                    }\r\n                    else if (lines[i][c] === '(') {\r\n                        const funcName = lines[i].slice(startPosFuncName, c);\r\n                        // d('is not a number, valid func name')\r\n                        if (isNaN(Number(funcName))) {\r\n                            // if (isNaN(funcName as string)) {\r\n                            // if (isNumeric(funcName)) {\r\n                            // d(lines[i][c - 1], char())\r\n                            // d(`FUNCTION Ln ${i + 1} Col ${startPosFuncName + 1} - Col ${c + 1}`, lines[i].slice(startPosFuncName,c))\r\n                            everything.push({ type: 'function', line: i, colStart: startPosFuncName, colEnd: c, name: lines[i].slice(startPosFuncName, c) });\r\n                        }\r\n                        c++;\r\n                        continue outer3;\r\n                    }\r\n                    else {\r\n                        // letter without ( so var NOT func\r\n                        continue outer3;\r\n                    }\r\n                }\r\n            }\r\n            c++;\r\n        }\r\n        i++;\r\n    }\r\n    return everything;\r\n    function char() {\r\n        return `${c + 1} ${l()}`;\r\n    }\r\n    function l() {\r\n        return `line ${i + 1}`;\r\n    }\r\n};\r\n"],"sourceRoot":""}