move c past whitespaces

if it doesn't start with /*

if char===';' skip rest of line


string:

if ", and if next c+1 < length, if c+1==='"'


FUNCTION:
  get alphaNum, if not a number like 123(), it's a function.


finding a *.d.ts bundler (typescript declaration files):
  tried (didn't wor):
    ts-loader: declaration-bundler-webpack-plugin
      https://github.com/TypeStrong/ts-loader#declarations-dts
      https://www.npmjs.com/package/declaration-bundler-webpack-plugin
    dts-bundle-generator:
      Project seems dead. dts-bundle-generator looks like an alternative. #83
        https://github.com/TypeStrong/dts-bundle/issues/83
      https://github.com/timocov/dts-bundle-generator
  dts-bundle worked:
    https://github.com/TypeStrong/dts-bundle


src -> src/parser/ and src/usage.ts
because I don't want usage.ts to be bundled.


webpack.config.js -> build\webpack.config.js with build\dtsBundle.js & build\unlink_d.ts.js


`yarn declarations`(tsc --emitDeclarationOnly) isn't needed because `yarn webpackProd` somehow produces the declaration files...
  note the "include": ["src/parser/**/*.ts"], (in tsconfig.json) `yarn webpackProd` somehow respects that


removed sourcemaps (I don't think I need sourcemap in prod):
(idk what options do) https://webpack.js.org/configuration/devtool/
removed:
  (package.json) webpack --devtool hidden-source-map
  (webpack.config.js) // devtool: 'nosources-source-map',


(webpack.config.js)    
//https://webpack.js.org/guides/author-libraries/#expose-the-library
    library: {
      name: 'ahkParser',
      type: 'umd',
},
idk what library.name does, but I'm using camelCase because the example is `library: "webpackNumbers",`
it seems that it's used in script tag
<script>
  window.webpackNumbers.wordToNum('Five');
</script>


what if I only want the .js and NOT the .d.ts
just like lodash and @types/lodash, I put @types/ahk_parser.js in /types/package.json
notice that ahk_parser.js & @types/ahk_parser.js are in the same repo, but they won't be when published, because
package.json: files: [only takes index.js], and /types/ will be it's own npm package

how to use locally:
yarn add link:../ahk_parser.js
yarn add -D link:../ahk_parser.js/types

from npm package registry: idk yet

REORGANIZED
while (c < numCharsMinusOne) {
  if (whiteSpaceObj[lines[i][c]]) {
    c++
    continue
  } else if (lines[i].slice(c, c + 2) === '*/') {
    everything.push({type: 'MultilineComment', lineStart: multiLineCommentLineStart, colStart: multiLineCommentColStart, lineEnd: i, colEnd:c + 2})
    // d('MultilineComment END', l())
    i++
    break outer2
  }
  break
}
->
//skip through whiteSpaces
while (c < numCharsMinusOne && whiteSpaceObj[lines[i][c]]) {
  c++
}

//if line starts with */
if (lines[i].slice(c, c + 2) === '*/') {
  everything.push({type: 'MultilineComment', lineStart: multiLineCommentLineStart, colStart: multiLineCommentColStart, lineEnd: i, colEnd:c + 2})
  // d('MultilineComment END', l())
  break
}

a line can start with:
HOTKEY:
  $^+left::

can this be a var ?
  $
  yes

  #NoEnv
  yes, but you can't assign it like this #NoEnv :=4, you can't have a space

  #include
  same

  #if
  same

  #ANYDirective
  same

  #
  fine variable, # :=3, still works as a var

  return
  fine variable, return :=3

  if
  yes, but if :=, becomes an if statement? (not confirmed)

  for
  fine variable, for :=3, still works as a var, what a surprise

  ExitApp
  fine variable, ExitApp :=3

#NoEnv is actually just a statement just like Send, ignore the # if it helps

when is it incorrect to skip spaces ?

I shouldn't skip spaces for:
  function definition

#Include though

NO SPACE: ASSIGNMENT
#NoEnv:=2
SPACE: STATEMENT
#NoEnv :=2

check if assignment
skip spaces
check if statement, else assignment

continue Trie: IT, will tell if assignment or statement ?
if not found in Trie: oof ?

so lets fill our Trie with
:=
#NoEnv

and setup a test

oh I cannot, it only does the variable name
I can use 2 Trie

if statement:
  if space:
    isSTATEMENT
  if end of line:
    isSTATEMENT
  if comma:
    isSTATEMENT
  else:
    is FUNCTION CALL ?
    is FUNCTION DEFINITION ?
    is assignment ?

if undefined:
  is FUNCTION CALL ?
  is FUNCTION DEFINITION ?
  is assignment ?

ok, it's the same pattern, good

but now, the end of trie, doesn't HAVE to be a function anymore, it can just be the TYPE
'statement'
instead of an object
{}

in fact, this trie can be a trie of ONLY statements. what else can there be ? hOtKeys...
#k::
ok fiouf, hotkeys can only be one CHAR
so
#if::
is impossible, I'M SPARED

omg
if :=2
this become an ACTUAL "if statement" (not confirmed)

not every statement becomes a statement if SPACE
for ex: "for :=2" is a fine variable.

if SpaceStatement:
  if space:
    isSTATEMENT
  if end of line:
    isSTATEMENT
  if comma:
    isSTATEMENT
  else:
    is FUNCTION CALL ?
    is FUNCTION DEFINITION ?
    is assignment ?

if WeakStatement:
  if end of line:
    isSTATEMENT
  if comma:
  HMMMMMMMMM
    for, doesn't work: FOR IS A CONTROL STATEMENT: which works with { block }
    isSTATEMENT
  else:
    is FUNCTION CALL ?
    is FUNCTION DEFINITION ?
    is assignment ?

if undefined:
  is FUNCTION CALL ?
  is FUNCTION DEFINITION ?
  is assignment ?


if trie ends at Control, it can't continue to ControlClick
dump trie, use if (object['control']=="SpaceStatement")

PLEASE, just write, REORDER AFTER

if FUNCTION:
if SpaceStatement:
  if space:
  if end of line:
  if comma:
    isSTATEMENT
skipSpaces
if ASSIGNMENT:

else:
  ???

it's control.directives, not statement: from ahk.tmLanguage.json
allowsamelinecomments|clipboardtimeout|commentflag|errorstdout|escapechar|hotkeyinterval|hotkeymodifiertimeout|hotstring|if|iftimeout|ifwinactive|ifwinexist|ifwinnotactive|ifwinnotexist|inputlevel|installkeybdhook|installmousehook|keyhistory|ltrim|maxhotkeysperinterval|maxmem|maxthreads|maxthreadsbuffer|maxthreadsperhotkey|menumaskkey|noenv|notrayicon|persistent|singleinstance|usehook|warn|winactivateforce

they're called #Directives in https://www.autohotkey.com/docs/commands/index.htm
and ControlClick is a Command

\ahk_parser.js\ahk_language\flow of control\is if assign an actual if\test38.ahk
;yes, `if :=4` is an actual if statement

oof.
LABELS:
if:
global, local, static
hotkey

ImageListID%A_Index% := IL_Create(50)

METHOD CALL:
LV_Colors.Cell(ListviewHwnd%whichSide%,row,3,color)

let's deal with METHOD CALL First.

now the question is: variable assignment first, or labels and hotkeys ?
var assignment: char==="%" or validChar[char]

well, it's now or never to be a label: because label can't have %

this is NOT a label
$enter::
$enter: ;this is a label

so:
skip whiteSpaces
if EOL or semiColonComment
it's a label

let's do varName first, hotkeys have more special chars

varName can be assignment, function, method.

COMMAND EOL:
  break
  return
  Exitapp
  ToolTip
  else
  global
  Else
  Return
  continue
  #Persistent

looks good to me

.\found\COMMAND comma\unique: looks good to me

whiteSpace DIRECTIVE:
  #NoEnv
  #KeyHistory
  #include
  #if
good

if statement: too many but is working fine

global local or static: works

.\found\FUNCTION CALL OR DEFINITION\unique: seems good now

this is NOT a METHOD call:
  str.=v[key] "+" k "|"
so check if the next character is a valid Var

.\found\METHOD OR PROPERTY\unique: good now

fixed //#LABELS with c++: need to advance it
.\found\LABEL EOL\unique: looks fine

LABEL SemiColonComment: not found but tested and works:
  gsaveSettings: ;labels

  gsaveSettings:  LABEL SemiColonComment 16 line 161

.\found\HOTKEY validVarName\unique: GOOD

var can have space between assignment
var .=

but hotkey can also, oh god
LShift & RCtrl::
Ralt & m::

fiouf label can't have spaces
label :

so I am both here and here:
 .=
 & RCtrl::

skip spaces
if assignment operator:
  ok
skip spaces OR HOTKEY stuff: &^#$ (this risks skipping everything, must limit it to line)
if ==='::'
  ok

.\found\2 char assignment operator\unique: good

invalid hotkey:
msgboxx,::msgbox, 4
good msgbox:
msgbox,::msgbox, 4

so I must check if it's a valid command
or I can do, if invalid hotkey: it's a command ?

so now I need to know WHICH COMMANDS will be a command when:
COMMAND,::
COMMAND ::
I need to be REALLY careful because there are command like FileRecycleEmpty: Empties the recycle bin.

I will do one thing for now: COMMAND comma test
ima test SOME.

hotkeys can have commands:
  f3::Exitapp
so no, hotkeys don't end with ::

all this is validVarName:
  whiteSpace directive
  virtual skip whiteSpaces:
    variable assignment
  whiteSpace directive OR Command
  hotkey

well, if there was no whiteSpace, it has NO CHANCE. of being anything
so let's start there

whiteSpace:
  directive?
  skip spaces:
    validVarName assignment ?
  Command?
hotkey

whiteSpace DIRECTIVE; validVar assignment; whiteSpace COMMAND

why isn't this being caught as hotkey ?
  ; invalid hotkey
  msgbox%::msgbox, 4

skip ONLY if c==0
fixed

`;:: works because currently if it start with ';' it's a comment
AND ONLY if it start with it. so:
  command ;fefef
wouldn't be detected

now let's do assign:
var:=expression:
  ok:=foo:=2 + bar:=4
  p(ok) ;6

expression can be:
  unit:
    var:var
    func: Substr(), Map()
    number:123
    string:"123"
    object literal:{ok:45,"?":3}:
      {string|prop : expression}
    array:[1,2,3,"3"]:
      [expression]

decimal numbers are not method calls, because they are not validVarName 123.34() : 123 is not validVarName
so, if . and number: it's DECIMAL, or float..

Integer, Float, %Var%

if one validVarName:
  skip until not validVarName
  if (:
    Func
  else if .
    if Number:
      DECIMAL
    else:
      method or prop
  else:
    var

//#unit
skip whiteSpaces
if EOL OR ;
  Continuation stuff
if % or validVarName
  skip until not validVarName
  EOL:
    isNotNumber:
      valid var
    else:
      Integer
  if .
    if Number:
      DECIMAL
    else:
      method or prop
  skip until not % OR validVarName
  EOL:
    %VAR% : can't be integer
  if (:
    Func
  if .
    method or prop
  else:
    isNotNumber:
      var
    else:
      Integer
else if "
else if ( paren for ternary or order of operations
else if [ array literal
else if { object literal
else:
  ???

oh no, it can be an array accessor.
var[2]

valid is a subgroup of % or valid

nonoononononono
var:= CmdLine := ( A_IsCompiled ? "" : """" A_AhkPath """" )

now let's do string concat expression ?

I need to understand how operators work because whiteSpace is an operator.
 concat operator, when there are no other operators

so, I'll start with +
var + var
after I found a var, I check if there's an operator.
better check for assignment first, += before +

what about whiteSpace?
+
a
operator AND whiteSpace
operator WITHOUT whiteSpace
concat AND whiteSpace

skip whiteSpaces
if EOL, return
check if assignment
check if operator
check if whiteSpace[lines[i][c - 1]]

OR

check if whiteSpace[lines[i][c - 1]]:
  skip whiteSpaces
  if operator:
    operator
  if assignment:
    assignment
  else:
    concat
if operator:
if assignment:

ok I'll choose the first one

comparison operators ARE operators
assignment operators are also operators...

oh, NOT, AND, OR, are reserved, they can't be variables.

I'll do paren now: 
( expression )

assignment CAN be EOL, so expect multilineParenExpr
var:=
(
"abc" foo   
)

THIS DOESN'T CONCAT
var:=
(
"abc" foo{WHITESPACE}
)
(
"abc" foo
)
BUT THIS DOES
var:=
(
"abc" foo
)
(
{WHITESPACE}"abc" foo
)

I should read this https://www.autohotkey.com/docs/Scripts.htm#continuation

The default behavior of a continuation section can be overridden
by including one or more of the following options to the right
 of the section's opening parenthesis. 
 If more than one option is present, 
 separate each one from the previous with a space. 
 For example: ( LTrim Join| %.
omg, so it's like a statement...

you are an expression, you do not know that you are inside
a continuation sequence, you don't care
your caller function knows.

what's the entry point ?
string EOL expect continuation
expression EOL expect continuation
only if not already inside continuation

my understanding is that when in continuation mode,
strings can go multiline

usually skipThroughEmptyLines() takes care of ; comments
but I don't want in continuation section, PLUS they are illegal

multiline comment in continuation?
no you can't, I'm saved.

oh cool, you can't have trailing comma on arrays
LEGAL
var1:=[1,"2"]
ILLEGAL
var1:=[1,"2",]

findPercentVar()

if (validVar)

try to be linear as possible..

now, function calls
how do I know if function call or definition?

foo(arg1, Byref arg2:=3) {
}

foo(arg1, Byref arg2:=3) 
{
}

foo([1,2,3],34)

this is illegal, cool
foo(arg1, Byref arg2:=3+3) {

:=number, string, bool

added exprFoundLine=-1, exprFoundLine=i first thing called by betweenExpression()

foo:="bar"
var2:={"4" foo:3  +3}
p(var2) ;4bar:6
var2:={foo:3  +3}
p(var2) ;foo:6
var2:={foo "4":3  +3}
p(var2) ;bar4:6
var2:={foo foo:3  +3}
p(var2) ;barbar:6

obj literal is dyn as long as it's not a single var
so if there's at least one betweenExpression

var2:={condition ? ifTrue : ifFalse : value}
p(var2)

2 implementations possible:
count how many ?
and if questionMarkCount
':' ends a ternary

OR

remove : from operators
when you see a ?, expect a :
this one is less recursive, but I'm more
comfortable with recursion ?

var:ok?no
1st would see :, and say, illegal
and do what ?

2nd: would not see it. and the line continues
because nothing found.

so 1st could see :, and continue line ?
knowing how deep probably is helpful

if 1operator === '?'

but it would say illegal when it sees
: of an object...
so let's just go with 2nd, expect a :

now that : isn't operator, it's concat...
I need to c++ after : , but still some concat

fixed concat, which is printed after because it needs to know if what's after is Expr

keep track of should there be a colon using colonDeep++ when obj or '?'

now how to check if obj key is single var or more? not now, it's not my buisness
keep track of an array?, always add to the newest and remove when done?

no, let's do functions

func definition:
validVar
findBetween
,
)


}

a strategy could be: find next ) , may be in another line oof
c++
skipThroughEmptyLines()
if lines[i][c]==='{'
come back
return true
else
come back
return false

if isFunctionDefinition() {

} else {
 enter function call 
}

I don't want lineLoop to do c=0
I need lineLoop to be a function because I
want to know when it ends. to wrap } ?
{ lineLoop 
}

I could just look for starting } in lineLoop
oh, what about func in func ?
Functions cannot contain functions,
the program will exit

lineLoop, which does c=0
and startOfLineLoop, which does nothing

I need to make sure any continue/break becomes continue lineLoop

here's how to use it:
  usingStartOfLineLoop = true
  skipThroughWhiteSpaces()
  continue startOfLineLoop

skipThroughEmptyLines skip ; at start of line c === 0 || whiteSpaceObj[lines[i][c - 1]]

1 AND (2 OR 3) instead of (1 AND 2) OR 3

lets start methods

https://www.autohotkey.com/docs/Concepts.htm#names
# @ $
