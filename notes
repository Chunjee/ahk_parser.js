move c past whitespaces

if it doesn't start with /*

if char===';' skip rest of line


string:

if ", and if next c+1 < length, if c+1==='"'


FUNCTION:
  get alphaNum, if not a number like 123(), it's a function.


finding a *.d.ts bundler (typescript declaration files):
  tried (didn't wor):
    ts-loader: declaration-bundler-webpack-plugin
      https://github.com/TypeStrong/ts-loader#declarations-dts
      https://www.npmjs.com/package/declaration-bundler-webpack-plugin
    dts-bundle-generator:
      Project seems dead. dts-bundle-generator looks like an alternative. #83
        https://github.com/TypeStrong/dts-bundle/issues/83
      https://github.com/timocov/dts-bundle-generator
  dts-bundle worked:
    https://github.com/TypeStrong/dts-bundle


src -> src/parser/ and src/usage.ts
because I don't want usage.ts to be bundled.


webpack.config.js -> build\webpack.config.js with build\dtsBundle.js & build\unlink_d.ts.js


`yarn declarations`(tsc --emitDeclarationOnly) isn't needed because `yarn webpackProd` somehow produces the declaration files...
  note the "include": ["src/parser/**/*.ts"], (in tsconfig.json) `yarn webpackProd` somehow respects that


removed sourcemaps (I don't think I need sourcemap in prod):
(idk what options do) https://webpack.js.org/configuration/devtool/
removed:
  (package.json) webpack --devtool hidden-source-map
  (webpack.config.js) // devtool: 'nosources-source-map',


(webpack.config.js)    
//https://webpack.js.org/guides/author-libraries/#expose-the-library
    library: {
      name: 'ahkParser',
      type: 'umd',
},
idk what library.name does, but I'm using camelCase because the example is `library: "webpackNumbers",`
it seems that it's used in script tag
<script>
  window.webpackNumbers.wordToNum('Five');
</script>


what if I only want the .js and NOT the .d.ts
just like lodash and @types/lodash, I put @types/ahk_parser.js in /types/package.json
notice that ahk_parser.js & @types/ahk_parser.js are in the same repo, but they won't be when published, because
package.json: files: [only takes index.js], and /types/ will be it's own npm package

how to use locally:
yarn add link:../ahk_parser.js
yarn add -D link:../ahk_parser.js/types

from npm package registry: idk yet

REORGANIZED
while (c < numCharsMinusOne) {
  if (whiteSpaceObj[lines[i][c]]) {
    c++
    continue
  } else if (lines[i].slice(c, c + 2) === '*/') {
    everything.push({type: 'MultilineComment', lineStart: multiLineCommentLineStart, colStart: multiLineCommentColStart, lineEnd: i, colEnd:c + 2})
    // d('MultilineComment END', l())
    i++
    break outer2
  }
  break
}
->
//skip through whiteSpaces
while (c < numCharsMinusOne && whiteSpaceObj[lines[i][c]]) {
  c++
}

//if line starts with */
if (lines[i].slice(c, c + 2) === '*/') {
  everything.push({type: 'MultilineComment', lineStart: multiLineCommentLineStart, colStart: multiLineCommentColStart, lineEnd: i, colEnd:c + 2})
  // d('MultilineComment END', l())
  break
}

a line can start with:
HOTKEY:
  $^+left::

can this be a var ?
  $
  yes

  #NoEnv
  yes, but you can't assign it like this #NoEnv :=4, you can't have a space

  #include
  same

  #if
  same

  #ANYDirective
  same

  #
  fine variable, # :=3, still works as a var

  return
  fine variable, return :=3

  if
  yes, but if :=, becomes an if statement? (not confirmed)

  for
  fine variable, for :=3, still works as a var, what a surprise

  ExitApp
  fine variable, ExitApp :=3

#NoEnv is actually just a statement just like Send, ignore the # if it helps

when is it incorrect to skip spaces ?

I shouldn't skip spaces for:
  function definition

#Include though

NO SPACE: ASSIGNMENT
#NoEnv:=2
SPACE: STATEMENT
#NoEnv :=2

check if assignment
skip spaces
check if statement, else assignment

continue Trie: IT, will tell if assignment or statement ?
if not found in Trie: oof ?

so lets fill our Trie with
:=
#NoEnv

and setup a test

oh I cannot, it only does the variable name
I can use 2 Trie

if statement:
  if space:
    isSTATEMENT
  if end of line:
    isSTATEMENT
  if comma:
    isSTATEMENT
  else:
    is FUNCTION CALL ?
    is FUNCTION DEFINITION ?
    is assignment ?

if undefined:
  is FUNCTION CALL ?
  is FUNCTION DEFINITION ?
  is assignment ?

ok, it's the same pattern, good

but now, the end of trie, doesn't HAVE to be a function anymore, it can just be the TYPE
'statement'
instead of an object
{}

in fact, this trie can be a trie of ONLY statements. what else can there be ? hOtKeys...
#k::
ok fiouf, hotkeys can only be one CHAR
so
#if::
is impossible, I'M SPARED

omg
if :=2
this become an ACTUAL "if statement" (not confirmed)

not every statement becomes a statement if SPACE
for ex: "for :=2" is a fine variable.

if SpaceStatement:
  if space:
    isSTATEMENT
  if end of line:
    isSTATEMENT
  if comma:
    isSTATEMENT
  else:
    is FUNCTION CALL ?
    is FUNCTION DEFINITION ?
    is assignment ?

if WeakStatement:
  if end of line:
    isSTATEMENT
  if comma:
  HMMMMMMMMM
    for, doesn't work: FOR IS A CONTROL STATEMENT: which works with { block }
    isSTATEMENT
  else:
    is FUNCTION CALL ?
    is FUNCTION DEFINITION ?
    is assignment ?

if undefined:
  is FUNCTION CALL ?
  is FUNCTION DEFINITION ?
  is assignment ?


if trie ends at Control, it can't continue to ControlClick
dump trie, use if (object['control']=="SpaceStatement")

PLEASE, just write, REORDER AFTER

if FUNCTION:
if SpaceStatement:
  if space:
  if end of line:
  if comma:
    isSTATEMENT
skipSpaces
if ASSIGNMENT:

else:
  ???

it's control.directives, not statement: from ahk.tmLanguage.json
allowsamelinecomments|clipboardtimeout|commentflag|errorstdout|escapechar|hotkeyinterval|hotkeymodifiertimeout|hotstring|if|iftimeout|ifwinactive|ifwinexist|ifwinnotactive|ifwinnotexist|inputlevel|installkeybdhook|installmousehook|keyhistory|ltrim|maxhotkeysperinterval|maxmem|maxthreads|maxthreadsbuffer|maxthreadsperhotkey|menumaskkey|noenv|notrayicon|persistent|singleinstance|usehook|warn|winactivateforce

they're called #Directives in https://www.autohotkey.com/docs/commands/index.htm
and ControlClick is a Command

\ahk_parser.js\ahk_language\flow of control\is if assign an actual if\test38.ahk
;yes, `if :=4` is an actual if statement

oof.
LABELS:
if:
global, local, static
hotkey

ImageListID%A_Index% := IL_Create(50)

METHOD CALL:
LV_Colors.Cell(ListviewHwnd%whichSide%,row,3,color)

let's deal with METHOD CALL First.

now the question is: variable assignment first, or labels and hotkeys ?
var assignment: char==="%" or validChar[char]

well, it's now or never to be a label: because label can't have %

this is NOT a label
$enter::
$enter: ;this is a label

so:
skip whiteSpaces
if EOL or semiColonComment
it's a label

let's do varName first, hotkeys have more special chars

varName can be assignment, function, method.

COMMAND EOL:
  break
  return
  Exitapp
  ToolTip
  else
  global
  Else
  Return
  continue
  #Persistent

looks good to me

.\found\COMMAND comma\unique: looks good to me

whiteSpace DIRECTIVE:
  #NoEnv
  #KeyHistory
  #include
  #if
good

if statement: too many but is working fine

global local or static: works

.\found\FUNCTION CALL OR DEFINITION\unique: seems good now

this is NOT a METHOD call:
  str.=v[key] "+" k "|"
so check if the next character is a valid Var

.\found\METHOD OR PROPERTY\unique: good now

fixed //#LABELS with c++: need to advance it
.\found\LABEL EOL\unique: looks fine

LABEL SemiColonComment: not found but tested and works:
  gsaveSettings: ;labels

  gsaveSettings:  LABEL SemiColonComment 16 line 161

